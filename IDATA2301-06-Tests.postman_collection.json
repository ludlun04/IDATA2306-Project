{
	"info": {
		"_postman_id": "f0bdc152-0aa9-4c6d-b2e9-9763cc9c6b7d",
		"name": "IDATA2301-06-Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27024266"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Get Admin Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"admin_token\", pm.response.text())"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"admin@user.no\",\r\n    \"password\":\"yes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/authenticate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"user_token\", pm.response.text())"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"user@user.no\",\r\n    \"password\": \"yes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/authenticate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Get Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check that the statuscode is correct\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"admin@user.no\",\r\n    \"password\":\"yes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/authenticate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token with null body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check that the statuscode is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/authenticate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token With Incorrect Username or Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check that the statuscode is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401)\r",
									"});\r",
									"\r",
									"pm.test(\"Body says incorrect username or password\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"Incorrect username or password\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"user2\",\r\n    \"password\":\"yes2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/authenticate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cars",
			"item": [
				{
					"name": "Get all cars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains the correct amount of cars\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(26);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars with given brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains the correct amount of cars\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(4);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car?brand=volkswagen",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							],
							"query": [
								{
									"key": "brand",
									"value": "volkswagen"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars with given fuel type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains the correct amount of cars\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(8);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car?fuel_type=petrol",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							],
							"query": [
								{
									"key": "fuel_type",
									"value": "petrol"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars with given seller",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains the correct amount of cars\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(2);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car?seller=Miller Bil",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							],
							"query": [
								{
									"key": "seller",
									"value": "Miller Bil"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars with given number of seats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains the correct amount of cars\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(15);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car?seats=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							],
							"query": [
								{
									"key": "seats",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars with invalid given number of seats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car?seats=fifty",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							],
							"query": [
								{
									"key": "seats",
									"value": "fifty"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars available from a given time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains the correct amount of cars\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(3);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car?from_time=2025-01-20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							],
							"query": [
								{
									"key": "from_time",
									"value": "2025-01-20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars available from an invalid given time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car?from_time=today",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							],
							"query": [
								{
									"key": "from_time",
									"value": "today"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars available between given times",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains the correct amount of cars\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car?between_times=2025-01-05,2025-02-10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							],
							"query": [
								{
									"key": "between_times",
									"value": "2025-01-05,2025-02-10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars available between invalid given times",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car?between_times=dontcare",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							],
							"query": [
								{
									"key": "between_times",
									"value": "dontcare"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars available between given times missing one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car?between_times=2025-01-05",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							],
							"query": [
								{
									"key": "between_times",
									"value": "2025-01-05"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars from a given price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains the correct amount of cars\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(3);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car?from_price=550",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							],
							"query": [
								{
									"key": "from_price",
									"value": "550"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars from an invalid given price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car?from_price=onemillionbillion",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							],
							"query": [
								{
									"key": "from_price",
									"value": "onemillionbillion"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars to a given price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains the correct amount of cars\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car?to_price=549",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							],
							"query": [
								{
									"key": "to_price",
									"value": "549"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars to an invalid given price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car?to_price=onehundered",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							],
							"query": [
								{
									"key": "to_price",
									"value": "onehundered"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars by keyword model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains the correct amount of cars\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car?keyword=CoRol",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							],
							"query": [
								{
									"key": "keyword",
									"value": "CoRol"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars by keyword brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains the correct amount of cars\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(2);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car?keyword=olKsWa",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							],
							"query": [
								{
									"key": "keyword",
									"value": "olKsWa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt get by id without auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt insert without auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"year\": 2016,\n    \"numberOfSeats\": 4,\n    \"pricePerDay\": 700,\n    \"model\": {\n        \"id\": 3,\n        \"name\": \"Polo\",\n        \"brand\": {\n            \"id\": 2,\n            \"name\": \"Volkswagen\"\n        }\n    },\n    \"fuelType\": {\n        \"id\": 2,\n        \"name\": \"Diesel\"\n    },\n    \"transmissionType\": {\n        \"id\": 1,\n        \"name\": \"Manual\"\n    },\n    \"addons\": [\n        {\n            \"id\": 1,\n            \"name\": \"GPS\"\n        }\n    ],\n    \"features\": [\n        {\n            \"id\": 1,\n            \"name\": \"Air conditioning\"\n        }\n    ],\n    \"company\": {\n        \"id\": 0,\n        \"name\": \"Company\",\n        \"address\": \"Apple road\",\n        \"phoneNumber\": {\n            \"id\": 2,\n            \"countryCode\": \"+47\",\n            \"number\": \"12345678\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/car",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt delete without auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid get by existing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid get by non-existing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car/23453534353",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car",
								"23453534353"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid insert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"year\": 2016,\n    \"numberOfSeats\": 4,\n    \"pricePerDay\": 700,\n    \"model\": {\n        \"id\": 3,\n        \"name\": \"Polo\",\n        \"brand\": {\n            \"id\": 2,\n            \"name\": \"Volkswagen\"\n        }\n    },\n    \"fuelType\": {\n        \"id\": 2,\n        \"name\": \"Diesel\"\n    },\n    \"transmissionType\": {\n        \"id\": 1,\n        \"name\": \"Manual\"\n    },\n    \"addons\": [\n        {\n            \"id\": 1,\n            \"name\": \"GPS\"\n        }\n    ],\n    \"features\": [\n        {\n            \"id\": 1,\n            \"name\": \"Air conditioning\"\n        }\n    ],\n    \"company\": {\n        \"id\": 0,\n        \"name\": \"Company\",\n        \"address\": \"Apple road\",\n        \"phoneNumber\": {\n            \"id\": 2,\n            \"countryCode\": \"+47\",\n            \"number\": \"12345678\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/car",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid insert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"year\": 2016,\n    \"numberOfSeats\": 4,\n    \"pricePerDay\": 700,\n    \"model\": {\n        \"id\": 3,\n        \"name\": \"Polo\",\n        \"brand\": {\n            \"id\": 2,\n            \"name\": \"Volkswagen\"\n        }\n    },\n    \"fuelType\": {\n        \"id\": 2,\n        \"name\": \"Diesel\"\n    },\n    \"transmissionType\": {\n        \"id\": 1,\n        \"name\": \"Manual\"\n    },\n    \"addons\": [\n        {\n            \"id\": 1,\n            \"name\": \"GPS\"\n        }\n    ],\n    \"features\": [\n        {\n            \"id\": 1,\n            \"name\": \"Air conditioning\"\n        }\n    ],\n    \"company\": {\n        \"id\": 1,\n        \"name\": \"Company\",\n        \"address\": \"Apple road\",\n        \"phoneNumber\": {\n            \"id\": 2,\n            \"countryCode\": \"+47\",\n            \"number\": \"12345678\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/car",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains the correct amount of cars\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(5);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid delete existing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid delete non-existing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car/289348934599999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car",
								"289348934599999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains the correct amount of cars\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(4);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Company",
			"item": [
				{
					"name": "Get All Companies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code to be 200\", () => {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"pm.test(\"Body contains 2 companies\", () => {\r",
									"    pm.expect(pm.response.json().length).to.equal(2)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/company",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code to be 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/company/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"company",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user to company",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/company/0/user/0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"company",
								"0",
								"user",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users In Company",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/company/0/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"company",
								"0",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users In Company Copy",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/company/0/user/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"company",
								"0",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users In Company Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/company/0/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"company",
								"0",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "Create Car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.collectionVariables.set(\"order_created_car\", pm.response.text())"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"year\": 2016,\r\n    \"numberOfSeats\": 4,\r\n    \"pricePerDay\": 700,\r\n    \"model\": {\r\n        \"id\": 3,\r\n        \"name\": \"Polo\",\r\n        \"brand\": {\r\n            \"id\": 2,\r\n            \"name\": \"Volkswagen\"\r\n        }\r\n    },\r\n    \"fuelType\": {\r\n        \"id\": 2,\r\n        \"name\": \"Diesel\"\r\n    },\r\n    \"transmissionType\": {\r\n        \"id\": 1,\r\n        \"name\": \"Manual\"\r\n    },\r\n    \"addons\": [\r\n        {\r\n            \"id\": 1,\r\n            \"name\": \"GPS\"\r\n        }\r\n    ],\r\n    \"features\": [\r\n        {\r\n            \"id\": 1,\r\n            \"name\": \"Air conditioning\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/car",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201)\r",
									"})\r",
									"\r",
									"pm.collectionVariables.set(\"created_order\", pm.response.text())"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Current time\r",
									"let now = new Date();\r",
									"\r",
									"// Start date = now\r",
									"let startDate = now.toISOString();\r",
									"\r",
									"// End date = 24 hours later\r",
									"let tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000);\r",
									"let endDate = tomorrow.toISOString();\r",
									"\r",
									"// Set them as environment or local variables\r",
									"pm.variables.set(\"startDate\", startDate);\r",
									"pm.variables.set(\"endDate\", endDate);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"carId\": 1,\r\n    \"addonIds\": [\r\n        1\r\n    ],\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"endDate\": \"{{endDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Getting the correct order\", () => {\r",
									"    pm.expect(pm.response.json()[\"orderId\"]).to.equal(3)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/order/{{created_order}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order",
								"{{created_order}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cannot get other users order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/order/{{created_order}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order",
								"{{created_order}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get orders on car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Car 1 has 7 orders\", () => {\r",
									"    const data = pm.response.json()\r",
									"    pm.expect(data.length).to.equal(7)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/order/car/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order",
								"car",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Non owner user or admin user cannot delete order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/order/{{created_order}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order",
								"{{created_order}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/order/{{created_order}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order",
								"{{created_order}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order Removed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404)\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/order/{{created_order}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order",
								"{{created_order}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RemoveCar",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/car",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"car"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains 2 objects\", function() {\r",
									"    pm.expect(pm.response.json().length).to.equal(2);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cant get users with user token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Details For Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Username to be admin\", () => {\r",
									"    pm.expect(pm.response.json().username).to.eql(\"admin\")\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/details",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"details"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cannot get user details without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/details",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"details"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Favorites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/favorites",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cannot get favorites without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/favorites",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains id with user 1\", function() {\r",
									"    pm.expect(pm.response.json().id).to.eql(1);\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cannot Get user 1 without Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cannot Get user 1 without User Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Expect response to contain user with name admin\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].username).to.equal(\"admin\");\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/search/admin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"search",
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"password\" : \"Okay\",\r\n   \"firstName\" : \"John\",\r\n   \"lastName\" : \"Doe\",\r\n   \"email\" : \"yes@yes.com\",\r\n   \"address\": {\r\n    \"zipCode\" : 1,\r\n    \"country\" : \"Norway\",\r\n    \"streetAddress\" : \"Okay\"\r\n   },\r\n   \"phoneNumber\": {\r\n    \"countryCode\" : \"+47\",\r\n    \"number\" : \"43243242\"\r\n   },\r\n   \"dateOfBirth\" : 21290124\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove a user",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cannot get user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"address\" : {\r\n        \"country\" : \"Norway\",\r\n        \"zipCode\" : \"Some thing\",\r\n        \"streetAddress\" : \"Gata\"\r\n   }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{admin_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "created_order",
			"value": "1",
			"type": "string"
		},
		{
			"key": "order_created_car",
			"value": ""
		}
	]
}